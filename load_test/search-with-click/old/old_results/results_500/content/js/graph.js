/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 8812.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 3.0], [6.2, 3.0], [6.3, 3.0], [6.4, 3.0], [6.5, 3.0], [6.6, 3.0], [6.7, 3.0], [6.8, 3.0], [6.9, 3.0], [7.0, 3.0], [7.1, 3.0], [7.2, 3.0], [7.3, 3.0], [7.4, 3.0], [7.5, 3.0], [7.6, 3.0], [7.7, 3.0], [7.8, 3.0], [7.9, 3.0], [8.0, 3.0], [8.1, 3.0], [8.2, 3.0], [8.3, 3.0], [8.4, 3.0], [8.5, 3.0], [8.6, 3.0], [8.7, 3.0], [8.8, 3.0], [8.9, 3.0], [9.0, 3.0], [9.1, 3.0], [9.2, 3.0], [9.3, 3.0], [9.4, 3.0], [9.5, 3.0], [9.6, 3.0], [9.7, 3.0], [9.8, 3.0], [9.9, 3.0], [10.0, 3.0], [10.1, 3.0], [10.2, 3.0], [10.3, 3.0], [10.4, 3.0], [10.5, 3.0], [10.6, 3.0], [10.7, 3.0], [10.8, 3.0], [10.9, 3.0], [11.0, 3.0], [11.1, 3.0], [11.2, 3.0], [11.3, 3.0], [11.4, 3.0], [11.5, 3.0], [11.6, 3.0], [11.7, 3.0], [11.8, 3.0], [11.9, 3.0], [12.0, 3.0], [12.1, 3.0], [12.2, 3.0], [12.3, 3.0], [12.4, 3.0], [12.5, 3.0], [12.6, 3.0], [12.7, 3.0], [12.8, 3.0], [12.9, 3.0], [13.0, 3.0], [13.1, 3.0], [13.2, 3.0], [13.3, 3.0], [13.4, 3.0], [13.5, 3.0], [13.6, 3.0], [13.7, 3.0], [13.8, 3.0], [13.9, 3.0], [14.0, 3.0], [14.1, 3.0], [14.2, 3.0], [14.3, 3.0], [14.4, 3.0], [14.5, 3.0], [14.6, 3.0], [14.7, 3.0], [14.8, 3.0], [14.9, 3.0], [15.0, 3.0], [15.1, 3.0], [15.2, 3.0], [15.3, 3.0], [15.4, 3.0], [15.5, 3.0], [15.6, 3.0], [15.7, 3.0], [15.8, 3.0], [15.9, 3.0], [16.0, 3.0], [16.1, 3.0], [16.2, 3.0], [16.3, 3.0], [16.4, 3.0], [16.5, 3.0], [16.6, 3.0], [16.7, 3.0], [16.8, 3.0], [16.9, 3.0], [17.0, 3.0], [17.1, 3.0], [17.2, 3.0], [17.3, 3.0], [17.4, 3.0], [17.5, 3.0], [17.6, 3.0], [17.7, 3.0], [17.8, 3.0], [17.9, 3.0], [18.0, 3.0], [18.1, 3.0], [18.2, 3.0], [18.3, 3.0], [18.4, 3.0], [18.5, 3.0], [18.6, 3.0], [18.7, 3.0], [18.8, 3.0], [18.9, 3.0], [19.0, 3.0], [19.1, 3.0], [19.2, 3.0], [19.3, 3.0], [19.4, 3.0], [19.5, 3.0], [19.6, 3.0], [19.7, 3.0], [19.8, 3.0], [19.9, 3.0], [20.0, 3.0], [20.1, 3.0], [20.2, 3.0], [20.3, 3.0], [20.4, 3.0], [20.5, 3.0], [20.6, 3.0], [20.7, 3.0], [20.8, 3.0], [20.9, 3.0], [21.0, 3.0], [21.1, 3.0], [21.2, 3.0], [21.3, 3.0], [21.4, 3.0], [21.5, 3.0], [21.6, 3.0], [21.7, 3.0], [21.8, 3.0], [21.9, 3.0], [22.0, 3.0], [22.1, 3.0], [22.2, 3.0], [22.3, 3.0], [22.4, 3.0], [22.5, 3.0], [22.6, 3.0], [22.7, 3.0], [22.8, 3.0], [22.9, 3.0], [23.0, 3.0], [23.1, 3.0], [23.2, 3.0], [23.3, 3.0], [23.4, 3.0], [23.5, 3.0], [23.6, 3.0], [23.7, 3.0], [23.8, 3.0], [23.9, 3.0], [24.0, 3.0], [24.1, 3.0], [24.2, 3.0], [24.3, 3.0], [24.4, 3.0], [24.5, 3.0], [24.6, 3.0], [24.7, 3.0], [24.8, 3.0], [24.9, 3.0], [25.0, 3.0], [25.1, 3.0], [25.2, 3.0], [25.3, 3.0], [25.4, 3.0], [25.5, 3.0], [25.6, 3.0], [25.7, 3.0], [25.8, 3.0], [25.9, 3.0], [26.0, 3.0], [26.1, 3.0], [26.2, 3.0], [26.3, 3.0], [26.4, 3.0], [26.5, 3.0], [26.6, 3.0], [26.7, 3.0], [26.8, 3.0], [26.9, 3.0], [27.0, 3.0], [27.1, 3.0], [27.2, 3.0], [27.3, 3.0], [27.4, 3.0], [27.5, 3.0], [27.6, 3.0], [27.7, 3.0], [27.8, 3.0], [27.9, 3.0], [28.0, 3.0], [28.1, 3.0], [28.2, 3.0], [28.3, 3.0], [28.4, 3.0], [28.5, 3.0], [28.6, 3.0], [28.7, 3.0], [28.8, 3.0], [28.9, 3.0], [29.0, 3.0], [29.1, 3.0], [29.2, 3.0], [29.3, 3.0], [29.4, 3.0], [29.5, 3.0], [29.6, 3.0], [29.7, 3.0], [29.8, 3.0], [29.9, 3.0], [30.0, 3.0], [30.1, 3.0], [30.2, 3.0], [30.3, 3.0], [30.4, 3.0], [30.5, 3.0], [30.6, 3.0], [30.7, 3.0], [30.8, 3.0], [30.9, 3.0], [31.0, 3.0], [31.1, 3.0], [31.2, 3.0], [31.3, 3.0], [31.4, 3.0], [31.5, 3.0], [31.6, 3.0], [31.7, 3.0], [31.8, 3.0], [31.9, 3.0], [32.0, 3.0], [32.1, 3.0], [32.2, 3.0], [32.3, 3.0], [32.4, 3.0], [32.5, 3.0], [32.6, 3.0], [32.7, 3.0], [32.8, 3.0], [32.9, 3.0], [33.0, 3.0], [33.1, 3.0], [33.2, 3.0], [33.3, 3.0], [33.4, 3.0], [33.5, 3.0], [33.6, 3.0], [33.7, 3.0], [33.8, 3.0], [33.9, 3.0], [34.0, 3.0], [34.1, 3.0], [34.2, 3.0], [34.3, 3.0], [34.4, 3.0], [34.5, 3.0], [34.6, 3.0], [34.7, 3.0], [34.8, 3.0], [34.9, 3.0], [35.0, 3.0], [35.1, 3.0], [35.2, 3.0], [35.3, 3.0], [35.4, 3.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 3.0], [36.6, 3.0], [36.7, 3.0], [36.8, 3.0], [36.9, 3.0], [37.0, 3.0], [37.1, 3.0], [37.2, 3.0], [37.3, 3.0], [37.4, 3.0], [37.5, 3.0], [37.6, 4.0], [37.7, 4.0], [37.8, 4.0], [37.9, 4.0], [38.0, 4.0], [38.1, 4.0], [38.2, 4.0], [38.3, 4.0], [38.4, 4.0], [38.5, 4.0], [38.6, 4.0], [38.7, 4.0], [38.8, 4.0], [38.9, 4.0], [39.0, 4.0], [39.1, 4.0], [39.2, 4.0], [39.3, 4.0], [39.4, 4.0], [39.5, 4.0], [39.6, 4.0], [39.7, 4.0], [39.8, 4.0], [39.9, 4.0], [40.0, 4.0], [40.1, 4.0], [40.2, 4.0], [40.3, 4.0], [40.4, 4.0], [40.5, 4.0], [40.6, 4.0], [40.7, 4.0], [40.8, 4.0], [40.9, 4.0], [41.0, 4.0], [41.1, 4.0], [41.2, 4.0], [41.3, 4.0], [41.4, 4.0], [41.5, 4.0], [41.6, 4.0], [41.7, 4.0], [41.8, 4.0], [41.9, 4.0], [42.0, 4.0], [42.1, 4.0], [42.2, 4.0], [42.3, 4.0], [42.4, 4.0], [42.5, 4.0], [42.6, 4.0], [42.7, 4.0], [42.8, 4.0], [42.9, 4.0], [43.0, 4.0], [43.1, 4.0], [43.2, 4.0], [43.3, 4.0], [43.4, 4.0], [43.5, 4.0], [43.6, 4.0], [43.7, 4.0], [43.8, 4.0], [43.9, 4.0], [44.0, 4.0], [44.1, 4.0], [44.2, 4.0], [44.3, 4.0], [44.4, 4.0], [44.5, 4.0], [44.6, 4.0], [44.7, 4.0], [44.8, 4.0], [44.9, 4.0], [45.0, 4.0], [45.1, 4.0], [45.2, 4.0], [45.3, 4.0], [45.4, 4.0], [45.5, 4.0], [45.6, 4.0], [45.7, 4.0], [45.8, 4.0], [45.9, 4.0], [46.0, 4.0], [46.1, 4.0], [46.2, 4.0], [46.3, 4.0], [46.4, 4.0], [46.5, 4.0], [46.6, 4.0], [46.7, 4.0], [46.8, 4.0], [46.9, 4.0], [47.0, 4.0], [47.1, 4.0], [47.2, 4.0], [47.3, 4.0], [47.4, 4.0], [47.5, 4.0], [47.6, 4.0], [47.7, 4.0], [47.8, 4.0], [47.9, 4.0], [48.0, 4.0], [48.1, 4.0], [48.2, 4.0], [48.3, 4.0], [48.4, 4.0], [48.5, 4.0], [48.6, 4.0], [48.7, 4.0], [48.8, 4.0], [48.9, 4.0], [49.0, 4.0], [49.1, 4.0], [49.2, 4.0], [49.3, 4.0], [49.4, 4.0], [49.5, 4.0], [49.6, 4.0], [49.7, 4.0], [49.8, 4.0], [49.9, 4.0], [50.0, 4.0], [50.1, 4.0], [50.2, 4.0], [50.3, 4.0], [50.4, 4.0], [50.5, 4.0], [50.6, 4.0], [50.7, 4.0], [50.8, 4.0], [50.9, 4.0], [51.0, 4.0], [51.1, 4.0], [51.2, 4.0], [51.3, 4.0], [51.4, 4.0], [51.5, 4.0], [51.6, 4.0], [51.7, 4.0], [51.8, 4.0], [51.9, 4.0], [52.0, 4.0], [52.1, 4.0], [52.2, 4.0], [52.3, 4.0], [52.4, 4.0], [52.5, 4.0], [52.6, 4.0], [52.7, 4.0], [52.8, 4.0], [52.9, 4.0], [53.0, 4.0], [53.1, 4.0], [53.2, 4.0], [53.3, 4.0], [53.4, 4.0], [53.5, 4.0], [53.6, 4.0], [53.7, 4.0], [53.8, 4.0], [53.9, 4.0], [54.0, 4.0], [54.1, 4.0], [54.2, 4.0], [54.3, 4.0], [54.4, 4.0], [54.5, 4.0], [54.6, 4.0], [54.7, 4.0], [54.8, 4.0], [54.9, 4.0], [55.0, 4.0], [55.1, 4.0], [55.2, 4.0], [55.3, 4.0], [55.4, 4.0], [55.5, 4.0], [55.6, 4.0], [55.7, 4.0], [55.8, 4.0], [55.9, 4.0], [56.0, 4.0], [56.1, 4.0], [56.2, 4.0], [56.3, 4.0], [56.4, 4.0], [56.5, 4.0], [56.6, 4.0], [56.7, 4.0], [56.8, 4.0], [56.9, 4.0], [57.0, 4.0], [57.1, 4.0], [57.2, 4.0], [57.3, 4.0], [57.4, 4.0], [57.5, 4.0], [57.6, 4.0], [57.7, 4.0], [57.8, 4.0], [57.9, 4.0], [58.0, 4.0], [58.1, 4.0], [58.2, 4.0], [58.3, 4.0], [58.4, 4.0], [58.5, 4.0], [58.6, 4.0], [58.7, 4.0], [58.8, 4.0], [58.9, 4.0], [59.0, 4.0], [59.1, 4.0], [59.2, 4.0], [59.3, 4.0], [59.4, 4.0], [59.5, 4.0], [59.6, 4.0], [59.7, 4.0], [59.8, 4.0], [59.9, 4.0], [60.0, 4.0], [60.1, 4.0], [60.2, 4.0], [60.3, 4.0], [60.4, 4.0], [60.5, 4.0], [60.6, 4.0], [60.7, 4.0], [60.8, 4.0], [60.9, 4.0], [61.0, 4.0], [61.1, 4.0], [61.2, 4.0], [61.3, 4.0], [61.4, 4.0], [61.5, 4.0], [61.6, 4.0], [61.7, 4.0], [61.8, 4.0], [61.9, 4.0], [62.0, 4.0], [62.1, 4.0], [62.2, 4.0], [62.3, 4.0], [62.4, 4.0], [62.5, 4.0], [62.6, 4.0], [62.7, 4.0], [62.8, 4.0], [62.9, 4.0], [63.0, 4.0], [63.1, 4.0], [63.2, 4.0], [63.3, 4.0], [63.4, 4.0], [63.5, 4.0], [63.6, 4.0], [63.7, 4.0], [63.8, 4.0], [63.9, 4.0], [64.0, 4.0], [64.1, 4.0], [64.2, 4.0], [64.3, 4.0], [64.4, 4.0], [64.5, 4.0], [64.6, 4.0], [64.7, 4.0], [64.8, 4.0], [64.9, 5.0], [65.0, 5.0], [65.1, 5.0], [65.2, 5.0], [65.3, 5.0], [65.4, 5.0], [65.5, 5.0], [65.6, 5.0], [65.7, 5.0], [65.8, 5.0], [65.9, 5.0], [66.0, 5.0], [66.1, 5.0], [66.2, 5.0], [66.3, 5.0], [66.4, 5.0], [66.5, 5.0], [66.6, 5.0], [66.7, 5.0], [66.8, 5.0], [66.9, 5.0], [67.0, 5.0], [67.1, 5.0], [67.2, 5.0], [67.3, 5.0], [67.4, 5.0], [67.5, 5.0], [67.6, 5.0], [67.7, 5.0], [67.8, 5.0], [67.9, 5.0], [68.0, 5.0], [68.1, 5.0], [68.2, 5.0], [68.3, 5.0], [68.4, 5.0], [68.5, 5.0], [68.6, 5.0], [68.7, 5.0], [68.8, 5.0], [68.9, 5.0], [69.0, 5.0], [69.1, 5.0], [69.2, 5.0], [69.3, 5.0], [69.4, 5.0], [69.5, 5.0], [69.6, 5.0], [69.7, 5.0], [69.8, 5.0], [69.9, 5.0], [70.0, 5.0], [70.1, 5.0], [70.2, 5.0], [70.3, 5.0], [70.4, 5.0], [70.5, 5.0], [70.6, 5.0], [70.7, 5.0], [70.8, 5.0], [70.9, 5.0], [71.0, 5.0], [71.1, 5.0], [71.2, 5.0], [71.3, 5.0], [71.4, 5.0], [71.5, 5.0], [71.6, 5.0], [71.7, 5.0], [71.8, 5.0], [71.9, 5.0], [72.0, 5.0], [72.1, 5.0], [72.2, 5.0], [72.3, 5.0], [72.4, 5.0], [72.5, 5.0], [72.6, 5.0], [72.7, 5.0], [72.8, 5.0], [72.9, 5.0], [73.0, 5.0], [73.1, 5.0], [73.2, 5.0], [73.3, 5.0], [73.4, 5.0], [73.5, 5.0], [73.6, 5.0], [73.7, 5.0], [73.8, 5.0], [73.9, 5.0], [74.0, 5.0], [74.1, 5.0], [74.2, 5.0], [74.3, 5.0], [74.4, 5.0], [74.5, 5.0], [74.6, 5.0], [74.7, 5.0], [74.8, 5.0], [74.9, 5.0], [75.0, 5.0], [75.1, 5.0], [75.2, 5.0], [75.3, 5.0], [75.4, 5.0], [75.5, 5.0], [75.6, 5.0], [75.7, 5.0], [75.8, 5.0], [75.9, 5.0], [76.0, 5.0], [76.1, 5.0], [76.2, 5.0], [76.3, 5.0], [76.4, 5.0], [76.5, 5.0], [76.6, 5.0], [76.7, 5.0], [76.8, 5.0], [76.9, 5.0], [77.0, 5.0], [77.1, 5.0], [77.2, 5.0], [77.3, 5.0], [77.4, 6.0], [77.5, 6.0], [77.6, 6.0], [77.7, 6.0], [77.8, 6.0], [77.9, 6.0], [78.0, 6.0], [78.1, 6.0], [78.2, 6.0], [78.3, 6.0], [78.4, 6.0], [78.5, 6.0], [78.6, 6.0], [78.7, 6.0], [78.8, 6.0], [78.9, 6.0], [79.0, 6.0], [79.1, 6.0], [79.2, 6.0], [79.3, 6.0], [79.4, 6.0], [79.5, 6.0], [79.6, 6.0], [79.7, 6.0], [79.8, 6.0], [79.9, 6.0], [80.0, 6.0], [80.1, 6.0], [80.2, 6.0], [80.3, 6.0], [80.4, 6.0], [80.5, 6.0], [80.6, 6.0], [80.7, 6.0], [80.8, 6.0], [80.9, 6.0], [81.0, 6.0], [81.1, 6.0], [81.2, 6.0], [81.3, 6.0], [81.4, 6.0], [81.5, 6.0], [81.6, 6.0], [81.7, 6.0], [81.8, 6.0], [81.9, 6.0], [82.0, 6.0], [82.1, 6.0], [82.2, 6.0], [82.3, 6.0], [82.4, 6.0], [82.5, 6.0], [82.6, 6.0], [82.7, 6.0], [82.8, 6.0], [82.9, 6.0], [83.0, 6.0], [83.1, 6.0], [83.2, 6.0], [83.3, 6.0], [83.4, 6.0], [83.5, 7.0], [83.6, 7.0], [83.7, 7.0], [83.8, 7.0], [83.9, 7.0], [84.0, 7.0], [84.1, 7.0], [84.2, 7.0], [84.3, 7.0], [84.4, 7.0], [84.5, 7.0], [84.6, 7.0], [84.7, 7.0], [84.8, 7.0], [84.9, 7.0], [85.0, 7.0], [85.1, 7.0], [85.2, 7.0], [85.3, 7.0], [85.4, 7.0], [85.5, 7.0], [85.6, 7.0], [85.7, 7.0], [85.8, 7.0], [85.9, 7.0], [86.0, 7.0], [86.1, 7.0], [86.2, 7.0], [86.3, 7.0], [86.4, 7.0], [86.5, 7.0], [86.6, 7.0], [86.7, 7.0], [86.8, 7.0], [86.9, 7.0], [87.0, 7.0], [87.1, 7.0], [87.2, 8.0], [87.3, 8.0], [87.4, 8.0], [87.5, 8.0], [87.6, 8.0], [87.7, 8.0], [87.8, 8.0], [87.9, 8.0], [88.0, 8.0], [88.1, 8.0], [88.2, 8.0], [88.3, 8.0], [88.4, 8.0], [88.5, 8.0], [88.6, 8.0], [88.7, 8.0], [88.8, 8.0], [88.9, 8.0], [89.0, 8.0], [89.1, 8.0], [89.2, 8.0], [89.3, 8.0], [89.4, 9.0], [89.5, 9.0], [89.6, 9.0], [89.7, 9.0], [89.8, 9.0], [89.9, 9.0], [90.0, 9.0], [90.1, 9.0], [90.2, 9.0], [90.3, 9.0], [90.4, 9.0], [90.5, 9.0], [90.6, 9.0], [90.7, 9.0], [90.8, 9.0], [90.9, 9.0], [91.0, 9.0], [91.1, 10.0], [91.2, 10.0], [91.3, 10.0], [91.4, 10.0], [91.5, 10.0], [91.6, 10.0], [91.7, 10.0], [91.8, 10.0], [91.9, 10.0], [92.0, 10.0], [92.1, 10.0], [92.2, 10.0], [92.3, 10.0], [92.4, 10.0], [92.5, 11.0], [92.6, 11.0], [92.7, 11.0], [92.8, 11.0], [92.9, 11.0], [93.0, 11.0], [93.1, 11.0], [93.2, 11.0], [93.3, 11.0], [93.4, 11.0], [93.5, 12.0], [93.6, 12.0], [93.7, 12.0], [93.8, 12.0], [93.9, 12.0], [94.0, 12.0], [94.1, 12.0], [94.2, 12.0], [94.3, 12.0], [94.4, 13.0], [94.5, 13.0], [94.6, 13.0], [94.7, 13.0], [94.8, 13.0], [94.9, 13.0], [95.0, 14.0], [95.1, 14.0], [95.2, 14.0], [95.3, 14.0], [95.4, 14.0], [95.5, 14.0], [95.6, 15.0], [95.7, 15.0], [95.8, 15.0], [95.9, 15.0], [96.0, 15.0], [96.1, 16.0], [96.2, 16.0], [96.3, 16.0], [96.4, 16.0], [96.5, 17.0], [96.6, 17.0], [96.7, 17.0], [96.8, 17.0], [96.9, 18.0], [97.0, 18.0], [97.1, 18.0], [97.2, 19.0], [97.3, 19.0], [97.4, 20.0], [97.5, 20.0], [97.6, 20.0], [97.7, 21.0], [97.8, 21.0], [97.9, 22.0], [98.0, 23.0], [98.1, 23.0], [98.2, 24.0], [98.3, 25.0], [98.4, 25.0], [98.5, 26.0], [98.6, 27.0], [98.7, 28.0], [98.8, 29.0], [98.9, 30.0], [99.0, 32.0], [99.1, 33.0], [99.2, 35.0], [99.3, 38.0], [99.4, 41.0], [99.5, 46.0], [99.6, 52.0], [99.7, 58.0], [99.8, 60.0], [99.9, 63.0]], "isOverall": false, "label": "GET title/:titleId", "isController": false}, {"data": [[0.0, 0.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 3.0], [14.8, 3.0], [14.9, 3.0], [15.0, 3.0], [15.1, 3.0], [15.2, 3.0], [15.3, 3.0], [15.4, 3.0], [15.5, 3.0], [15.6, 3.0], [15.7, 3.0], [15.8, 3.0], [15.9, 3.0], [16.0, 3.0], [16.1, 3.0], [16.2, 3.0], [16.3, 3.0], [16.4, 3.0], [16.5, 3.0], [16.6, 3.0], [16.7, 3.0], [16.8, 3.0], [16.9, 3.0], [17.0, 3.0], [17.1, 3.0], [17.2, 3.0], [17.3, 3.0], [17.4, 3.0], [17.5, 3.0], [17.6, 3.0], [17.7, 3.0], [17.8, 3.0], [17.9, 3.0], [18.0, 3.0], [18.1, 3.0], [18.2, 3.0], [18.3, 3.0], [18.4, 3.0], [18.5, 3.0], [18.6, 3.0], [18.7, 3.0], [18.8, 3.0], [18.9, 3.0], [19.0, 3.0], [19.1, 3.0], [19.2, 3.0], [19.3, 3.0], [19.4, 3.0], [19.5, 3.0], [19.6, 3.0], [19.7, 3.0], [19.8, 3.0], [19.9, 3.0], [20.0, 3.0], [20.1, 3.0], [20.2, 3.0], [20.3, 3.0], [20.4, 3.0], [20.5, 3.0], [20.6, 3.0], [20.7, 3.0], [20.8, 3.0], [20.9, 3.0], [21.0, 3.0], [21.1, 3.0], [21.2, 3.0], [21.3, 3.0], [21.4, 3.0], [21.5, 3.0], [21.6, 3.0], [21.7, 3.0], [21.8, 3.0], [21.9, 3.0], [22.0, 3.0], [22.1, 3.0], [22.2, 3.0], [22.3, 3.0], [22.4, 3.0], [22.5, 3.0], [22.6, 3.0], [22.7, 3.0], [22.8, 3.0], [22.9, 3.0], [23.0, 3.0], [23.1, 3.0], [23.2, 3.0], [23.3, 3.0], [23.4, 3.0], [23.5, 3.0], [23.6, 3.0], [23.7, 3.0], [23.8, 3.0], [23.9, 3.0], [24.0, 3.0], [24.1, 3.0], [24.2, 3.0], [24.3, 3.0], [24.4, 3.0], [24.5, 3.0], [24.6, 3.0], [24.7, 3.0], [24.8, 3.0], [24.9, 3.0], [25.0, 3.0], [25.1, 3.0], [25.2, 3.0], [25.3, 3.0], [25.4, 3.0], [25.5, 3.0], [25.6, 3.0], [25.7, 3.0], [25.8, 3.0], [25.9, 3.0], [26.0, 3.0], [26.1, 3.0], [26.2, 3.0], [26.3, 3.0], [26.4, 3.0], [26.5, 3.0], [26.6, 3.0], [26.7, 3.0], [26.8, 3.0], [26.9, 3.0], [27.0, 3.0], [27.1, 3.0], [27.2, 3.0], [27.3, 3.0], [27.4, 3.0], [27.5, 3.0], [27.6, 3.0], [27.7, 3.0], [27.8, 3.0], [27.9, 3.0], [28.0, 3.0], [28.1, 3.0], [28.2, 3.0], [28.3, 3.0], [28.4, 3.0], [28.5, 3.0], [28.6, 3.0], [28.7, 3.0], [28.8, 3.0], [28.9, 3.0], [29.0, 3.0], [29.1, 3.0], [29.2, 3.0], [29.3, 3.0], [29.4, 3.0], [29.5, 3.0], [29.6, 3.0], [29.7, 3.0], [29.8, 3.0], [29.9, 3.0], [30.0, 3.0], [30.1, 3.0], [30.2, 3.0], [30.3, 3.0], [30.4, 3.0], [30.5, 3.0], [30.6, 3.0], [30.7, 3.0], [30.8, 3.0], [30.9, 3.0], [31.0, 3.0], [31.1, 3.0], [31.2, 3.0], [31.3, 3.0], [31.4, 3.0], [31.5, 3.0], [31.6, 3.0], [31.7, 3.0], [31.8, 3.0], [31.9, 3.0], [32.0, 3.0], [32.1, 3.0], [32.2, 3.0], [32.3, 3.0], [32.4, 3.0], [32.5, 3.0], [32.6, 3.0], [32.7, 3.0], [32.8, 3.0], [32.9, 3.0], [33.0, 3.0], [33.1, 3.0], [33.2, 3.0], [33.3, 3.0], [33.4, 3.0], [33.5, 3.0], [33.6, 3.0], [33.7, 3.0], [33.8, 3.0], [33.9, 3.0], [34.0, 3.0], [34.1, 3.0], [34.2, 3.0], [34.3, 3.0], [34.4, 3.0], [34.5, 3.0], [34.6, 3.0], [34.7, 3.0], [34.8, 3.0], [34.9, 3.0], [35.0, 3.0], [35.1, 3.0], [35.2, 3.0], [35.3, 3.0], [35.4, 3.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 3.0], [36.6, 3.0], [36.7, 3.0], [36.8, 3.0], [36.9, 3.0], [37.0, 3.0], [37.1, 3.0], [37.2, 3.0], [37.3, 3.0], [37.4, 3.0], [37.5, 3.0], [37.6, 3.0], [37.7, 3.0], [37.8, 3.0], [37.9, 3.0], [38.0, 3.0], [38.1, 3.0], [38.2, 3.0], [38.3, 3.0], [38.4, 3.0], [38.5, 3.0], [38.6, 3.0], [38.7, 3.0], [38.8, 3.0], [38.9, 3.0], [39.0, 3.0], [39.1, 3.0], [39.2, 3.0], [39.3, 3.0], [39.4, 3.0], [39.5, 3.0], [39.6, 3.0], [39.7, 3.0], [39.8, 3.0], [39.9, 3.0], [40.0, 3.0], [40.1, 3.0], [40.2, 3.0], [40.3, 3.0], [40.4, 3.0], [40.5, 3.0], [40.6, 3.0], [40.7, 3.0], [40.8, 3.0], [40.9, 3.0], [41.0, 3.0], [41.1, 3.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 3.0], [41.7, 3.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 3.0], [42.8, 3.0], [42.9, 3.0], [43.0, 3.0], [43.1, 3.0], [43.2, 3.0], [43.3, 3.0], [43.4, 3.0], [43.5, 3.0], [43.6, 3.0], [43.7, 3.0], [43.8, 3.0], [43.9, 3.0], [44.0, 3.0], [44.1, 3.0], [44.2, 3.0], [44.3, 3.0], [44.4, 3.0], [44.5, 3.0], [44.6, 3.0], [44.7, 3.0], [44.8, 3.0], [44.9, 3.0], [45.0, 3.0], [45.1, 3.0], [45.2, 3.0], [45.3, 3.0], [45.4, 3.0], [45.5, 3.0], [45.6, 3.0], [45.7, 3.0], [45.8, 3.0], [45.9, 3.0], [46.0, 3.0], [46.1, 3.0], [46.2, 3.0], [46.3, 3.0], [46.4, 3.0], [46.5, 3.0], [46.6, 3.0], [46.7, 3.0], [46.8, 3.0], [46.9, 3.0], [47.0, 3.0], [47.1, 3.0], [47.2, 3.0], [47.3, 3.0], [47.4, 3.0], [47.5, 3.0], [47.6, 3.0], [47.7, 3.0], [47.8, 3.0], [47.9, 3.0], [48.0, 3.0], [48.1, 3.0], [48.2, 3.0], [48.3, 3.0], [48.4, 3.0], [48.5, 3.0], [48.6, 3.0], [48.7, 3.0], [48.8, 3.0], [48.9, 3.0], [49.0, 3.0], [49.1, 3.0], [49.2, 3.0], [49.3, 3.0], [49.4, 3.0], [49.5, 4.0], [49.6, 4.0], [49.7, 4.0], [49.8, 4.0], [49.9, 4.0], [50.0, 4.0], [50.1, 4.0], [50.2, 4.0], [50.3, 4.0], [50.4, 4.0], [50.5, 4.0], [50.6, 4.0], [50.7, 4.0], [50.8, 4.0], [50.9, 4.0], [51.0, 4.0], [51.1, 4.0], [51.2, 4.0], [51.3, 4.0], [51.4, 4.0], [51.5, 4.0], [51.6, 4.0], [51.7, 4.0], [51.8, 4.0], [51.9, 4.0], [52.0, 4.0], [52.1, 4.0], [52.2, 4.0], [52.3, 4.0], [52.4, 4.0], [52.5, 4.0], [52.6, 4.0], [52.7, 4.0], [52.8, 4.0], [52.9, 4.0], [53.0, 4.0], [53.1, 4.0], [53.2, 4.0], [53.3, 4.0], [53.4, 4.0], [53.5, 4.0], [53.6, 4.0], [53.7, 4.0], [53.8, 4.0], [53.9, 4.0], [54.0, 4.0], [54.1, 4.0], [54.2, 4.0], [54.3, 4.0], [54.4, 4.0], [54.5, 4.0], [54.6, 4.0], [54.7, 4.0], [54.8, 4.0], [54.9, 4.0], [55.0, 4.0], [55.1, 4.0], [55.2, 4.0], [55.3, 4.0], [55.4, 4.0], [55.5, 4.0], [55.6, 4.0], [55.7, 4.0], [55.8, 4.0], [55.9, 4.0], [56.0, 4.0], [56.1, 4.0], [56.2, 4.0], [56.3, 4.0], [56.4, 4.0], [56.5, 4.0], [56.6, 4.0], [56.7, 4.0], [56.8, 4.0], [56.9, 4.0], [57.0, 4.0], [57.1, 4.0], [57.2, 4.0], [57.3, 4.0], [57.4, 4.0], [57.5, 4.0], [57.6, 4.0], [57.7, 4.0], [57.8, 4.0], [57.9, 4.0], [58.0, 4.0], [58.1, 4.0], [58.2, 4.0], [58.3, 4.0], [58.4, 4.0], [58.5, 4.0], [58.6, 4.0], [58.7, 4.0], [58.8, 4.0], [58.9, 4.0], [59.0, 4.0], [59.1, 4.0], [59.2, 4.0], [59.3, 4.0], [59.4, 4.0], [59.5, 4.0], [59.6, 4.0], [59.7, 4.0], [59.8, 4.0], [59.9, 4.0], [60.0, 4.0], [60.1, 4.0], [60.2, 4.0], [60.3, 4.0], [60.4, 4.0], [60.5, 4.0], [60.6, 4.0], [60.7, 4.0], [60.8, 4.0], [60.9, 4.0], [61.0, 4.0], [61.1, 4.0], [61.2, 4.0], [61.3, 4.0], [61.4, 4.0], [61.5, 4.0], [61.6, 4.0], [61.7, 4.0], [61.8, 4.0], [61.9, 4.0], [62.0, 4.0], [62.1, 4.0], [62.2, 4.0], [62.3, 4.0], [62.4, 4.0], [62.5, 4.0], [62.6, 4.0], [62.7, 4.0], [62.8, 4.0], [62.9, 4.0], [63.0, 4.0], [63.1, 4.0], [63.2, 4.0], [63.3, 4.0], [63.4, 4.0], [63.5, 4.0], [63.6, 4.0], [63.7, 4.0], [63.8, 4.0], [63.9, 4.0], [64.0, 4.0], [64.1, 4.0], [64.2, 4.0], [64.3, 4.0], [64.4, 4.0], [64.5, 4.0], [64.6, 4.0], [64.7, 4.0], [64.8, 4.0], [64.9, 4.0], [65.0, 4.0], [65.1, 4.0], [65.2, 4.0], [65.3, 4.0], [65.4, 4.0], [65.5, 4.0], [65.6, 4.0], [65.7, 4.0], [65.8, 4.0], [65.9, 4.0], [66.0, 4.0], [66.1, 4.0], [66.2, 4.0], [66.3, 4.0], [66.4, 4.0], [66.5, 4.0], [66.6, 4.0], [66.7, 4.0], [66.8, 4.0], [66.9, 4.0], [67.0, 4.0], [67.1, 4.0], [67.2, 4.0], [67.3, 4.0], [67.4, 5.0], [67.5, 5.0], [67.6, 5.0], [67.7, 5.0], [67.8, 5.0], [67.9, 5.0], [68.0, 5.0], [68.1, 5.0], [68.2, 5.0], [68.3, 5.0], [68.4, 5.0], [68.5, 5.0], [68.6, 5.0], [68.7, 5.0], [68.8, 5.0], [68.9, 5.0], [69.0, 5.0], [69.1, 5.0], [69.2, 5.0], [69.3, 5.0], [69.4, 5.0], [69.5, 5.0], [69.6, 5.0], [69.7, 5.0], [69.8, 5.0], [69.9, 5.0], [70.0, 5.0], [70.1, 5.0], [70.2, 5.0], [70.3, 5.0], [70.4, 5.0], [70.5, 5.0], [70.6, 5.0], [70.7, 5.0], [70.8, 5.0], [70.9, 5.0], [71.0, 5.0], [71.1, 5.0], [71.2, 5.0], [71.3, 5.0], [71.4, 5.0], [71.5, 5.0], [71.6, 5.0], [71.7, 5.0], [71.8, 5.0], [71.9, 5.0], [72.0, 5.0], [72.1, 5.0], [72.2, 5.0], [72.3, 5.0], [72.4, 5.0], [72.5, 5.0], [72.6, 5.0], [72.7, 5.0], [72.8, 5.0], [72.9, 5.0], [73.0, 5.0], [73.1, 5.0], [73.2, 5.0], [73.3, 5.0], [73.4, 5.0], [73.5, 5.0], [73.6, 5.0], [73.7, 5.0], [73.8, 5.0], [73.9, 5.0], [74.0, 5.0], [74.1, 5.0], [74.2, 5.0], [74.3, 5.0], [74.4, 5.0], [74.5, 5.0], [74.6, 5.0], [74.7, 5.0], [74.8, 5.0], [74.9, 5.0], [75.0, 5.0], [75.1, 5.0], [75.2, 5.0], [75.3, 5.0], [75.4, 5.0], [75.5, 5.0], [75.6, 5.0], [75.7, 5.0], [75.8, 5.0], [75.9, 6.0], [76.0, 6.0], [76.1, 6.0], [76.2, 6.0], [76.3, 6.0], [76.4, 6.0], [76.5, 6.0], [76.6, 6.0], [76.7, 6.0], [76.8, 6.0], [76.9, 6.0], [77.0, 6.0], [77.1, 6.0], [77.2, 6.0], [77.3, 6.0], [77.4, 6.0], [77.5, 6.0], [77.6, 6.0], [77.7, 6.0], [77.8, 6.0], [77.9, 6.0], [78.0, 6.0], [78.1, 6.0], [78.2, 6.0], [78.3, 6.0], [78.4, 6.0], [78.5, 6.0], [78.6, 6.0], [78.7, 6.0], [78.8, 6.0], [78.9, 6.0], [79.0, 6.0], [79.1, 6.0], [79.2, 6.0], [79.3, 6.0], [79.4, 6.0], [79.5, 6.0], [79.6, 6.0], [79.7, 6.0], [79.8, 6.0], [79.9, 6.0], [80.0, 6.0], [80.1, 6.0], [80.2, 6.0], [80.3, 6.0], [80.4, 6.0], [80.5, 6.0], [80.6, 6.0], [80.7, 6.0], [80.8, 7.0], [80.9, 7.0], [81.0, 7.0], [81.1, 7.0], [81.2, 7.0], [81.3, 7.0], [81.4, 7.0], [81.5, 7.0], [81.6, 7.0], [81.7, 7.0], [81.8, 7.0], [81.9, 7.0], [82.0, 7.0], [82.1, 7.0], [82.2, 7.0], [82.3, 7.0], [82.4, 7.0], [82.5, 7.0], [82.6, 7.0], [82.7, 7.0], [82.8, 7.0], [82.9, 7.0], [83.0, 7.0], [83.1, 7.0], [83.2, 7.0], [83.3, 7.0], [83.4, 7.0], [83.5, 7.0], [83.6, 7.0], [83.7, 7.0], [83.8, 7.0], [83.9, 7.0], [84.0, 7.0], [84.1, 8.0], [84.2, 8.0], [84.3, 8.0], [84.4, 8.0], [84.5, 8.0], [84.6, 8.0], [84.7, 8.0], [84.8, 8.0], [84.9, 8.0], [85.0, 8.0], [85.1, 8.0], [85.2, 8.0], [85.3, 8.0], [85.4, 8.0], [85.5, 8.0], [85.6, 8.0], [85.7, 8.0], [85.8, 8.0], [85.9, 8.0], [86.0, 8.0], [86.1, 8.0], [86.2, 9.0], [86.3, 9.0], [86.4, 9.0], [86.5, 9.0], [86.6, 9.0], [86.7, 9.0], [86.8, 9.0], [86.9, 9.0], [87.0, 9.0], [87.1, 9.0], [87.2, 9.0], [87.3, 9.0], [87.4, 9.0], [87.5, 9.0], [87.6, 9.0], [87.7, 9.0], [87.8, 9.0], [87.9, 10.0], [88.0, 10.0], [88.1, 10.0], [88.2, 10.0], [88.3, 10.0], [88.4, 10.0], [88.5, 10.0], [88.6, 10.0], [88.7, 10.0], [88.8, 10.0], [88.9, 10.0], [89.0, 10.0], [89.1, 10.0], [89.2, 10.0], [89.3, 11.0], [89.4, 11.0], [89.5, 11.0], [89.6, 11.0], [89.7, 11.0], [89.8, 11.0], [89.9, 11.0], [90.0, 11.0], [90.1, 11.0], [90.2, 11.0], [90.3, 11.0], [90.4, 12.0], [90.5, 12.0], [90.6, 12.0], [90.7, 12.0], [90.8, 12.0], [90.9, 12.0], [91.0, 12.0], [91.1, 12.0], [91.2, 12.0], [91.3, 12.0], [91.4, 13.0], [91.5, 13.0], [91.6, 13.0], [91.7, 13.0], [91.8, 13.0], [91.9, 13.0], [92.0, 13.0], [92.1, 14.0], [92.2, 14.0], [92.3, 14.0], [92.4, 14.0], [92.5, 14.0], [92.6, 14.0], [92.7, 14.0], [92.8, 15.0], [92.9, 15.0], [93.0, 15.0], [93.1, 15.0], [93.2, 15.0], [93.3, 15.0], [93.4, 16.0], [93.5, 16.0], [93.6, 16.0], [93.7, 16.0], [93.8, 16.0], [93.9, 17.0], [94.0, 17.0], [94.1, 17.0], [94.2, 17.0], [94.3, 18.0], [94.4, 18.0], [94.5, 18.0], [94.6, 18.0], [94.7, 19.0], [94.8, 19.0], [94.9, 19.0], [95.0, 19.0], [95.1, 20.0], [95.2, 20.0], [95.3, 20.0], [95.4, 21.0], [95.5, 21.0], [95.6, 22.0], [95.7, 22.0], [95.8, 23.0], [95.9, 23.0], [96.0, 24.0], [96.1, 25.0], [96.2, 25.0], [96.3, 26.0], [96.4, 27.0], [96.5, 28.0], [96.6, 28.0], [96.7, 29.0], [96.8, 30.0], [96.9, 31.0], [97.0, 32.0], [97.1, 33.0], [97.2, 34.0], [97.3, 36.0], [97.4, 37.0], [97.5, 39.0], [97.6, 41.0], [97.7, 44.0], [97.8, 49.0], [97.9, 55.0], [98.0, 59.0], [98.1, 60.0], [98.2, 62.0], [98.3, 66.0], [98.4, 80.0], [98.5, 99.0], [98.6, 137.0], [98.7, 158.0], [98.8, 177.0], [98.9, 195.0], [99.0, 229.0], [99.1, 267.0], [99.2, 298.0], [99.3, 331.0], [99.4, 373.0], [99.5, 400.0], [99.6, 438.0], [99.7, 488.0], [99.8, 547.0], [99.9, 698.0], [100.0, 8812.0]], "isOverall": false, "label": "GET search/:title", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 54821.0, "series": [{"data": [[0.0, 44441.0], [100.0, 7.0]], "isOverall": false, "label": "GET title/:titleId", "isController": false}, {"data": [[0.0, 54821.0], [8200.0, 1.0], [8700.0, 1.0], [8800.0, 1.0], [600.0, 24.0], [700.0, 9.0], [800.0, 11.0], [900.0, 3.0], [1000.0, 4.0], [1100.0, 1.0], [1200.0, 1.0], [1400.0, 1.0], [100.0, 229.0], [200.0, 164.0], [4300.0, 1.0], [300.0, 160.0], [4900.0, 1.0], [5100.0, 1.0], [5400.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [6100.0, 1.0], [6200.0, 2.0], [6300.0, 1.0], [400.0, 126.0], [6600.0, 1.0], [6700.0, 2.0], [6800.0, 1.0], [7000.0, 1.0], [7200.0, 3.0], [7600.0, 1.0], [500.0, 76.0], [8000.0, 2.0]], "isOverall": false, "label": "GET search/:title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 99940.0, "series": [{"data": [[0.0, 99940.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 127.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 24.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 11.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.77380952380952, "minX": 1.71941742E12, "maxY": 500.0, "series": [{"data": [[1.71941742E12, 500.0], [1.71941754E12, 500.0], [1.71941748E12, 500.0], [1.71941766E12, 11.77380952380952], [1.7194176E12, 470.3464749901553]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71941766E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 5471.0, "series": [{"data": [[2.0, 3.3333333333333335], [3.0, 3.0], [4.0, 4.166666666666667], [5.0, 3.5], [6.0, 3.0], [7.0, 4.333333333333333], [8.0, 3.0], [9.0, 4.0], [10.0, 4.0], [11.0, 4.0], [12.0, 3.75], [13.0, 4.0], [14.0, 3.5], [15.0, 4.0], [16.0, 3.0], [17.0, 4.0], [18.0, 4.0], [19.0, 3.5], [20.0, 3.75], [21.0, 4.0], [22.0, 3.6666666666666665], [24.0, 3.0], [25.0, 3.1666666666666665], [26.0, 2.0], [27.0, 3.0], [28.0, 3.5], [29.0, 3.5], [30.0, 3.0], [31.0, 3.6666666666666665], [33.0, 3.0], [32.0, 3.0], [35.0, 4.0], [34.0, 4.0], [37.0, 3.0], [36.0, 3.0], [39.0, 3.0], [38.0, 3.0], [41.0, 3.0], [42.0, 4.0], [45.0, 4.0], [44.0, 3.0], [47.0, 4.0], [46.0, 4.0], [49.0, 3.5], [48.0, 3.0], [51.0, 3.0], [50.0, 4.0], [53.0, 4.0], [52.0, 4.5], [55.0, 3.0], [54.0, 3.6666666666666665], [57.0, 3.0], [56.0, 4.0], [59.0, 3.0], [58.0, 3.5], [61.0, 3.4], [60.0, 3.25], [63.0, 5.0], [62.0, 3.0], [67.0, 3.0], [66.0, 3.0], [65.0, 3.6666666666666665], [64.0, 3.0], [71.0, 3.0], [69.0, 3.0], [68.0, 4.0], [75.0, 4.0], [74.0, 3.0], [73.0, 3.3333333333333335], [72.0, 3.333333333333333], [79.0, 3.3333333333333335], [78.0, 3.3333333333333335], [77.0, 3.0], [76.0, 3.0], [83.0, 3.8], [81.0, 3.5], [80.0, 3.0], [87.0, 2.75], [86.0, 3.0], [85.0, 3.5], [91.0, 2.6666666666666665], [90.0, 3.0], [89.0, 2.6666666666666665], [88.0, 3.0], [95.0, 3.0], [94.0, 3.5], [93.0, 3.0], [92.0, 3.0], [99.0, 3.0], [98.0, 3.0], [97.0, 3.0], [96.0, 4.0], [103.0, 3.75], [102.0, 3.0], [101.0, 3.0], [100.0, 3.3333333333333335], [107.0, 4.0], [106.0, 3.0], [105.0, 2.6666666666666665], [104.0, 3.0], [111.0, 3.75], [110.0, 3.0], [109.0, 3.0], [108.0, 3.5], [115.0, 4.0], [114.0, 3.0], [113.0, 3.0], [112.0, 3.0], [119.0, 3.714285714285714], [118.0, 2.833333333333333], [117.0, 4.0], [123.0, 3.3333333333333335], [122.0, 3.0], [121.0, 5.0], [120.0, 3.0], [127.0, 3.5], [126.0, 3.3333333333333335], [125.0, 4.333333333333333], [124.0, 3.0], [135.0, 3.0], [134.0, 4.0], [133.0, 3.0], [132.0, 3.25], [131.0, 3.0], [130.0, 5.0], [128.0, 3.0], [143.0, 4.0], [142.0, 3.0], [141.0, 3.0], [140.0, 4.0], [139.0, 3.1], [138.0, 4.0], [137.0, 4.5], [136.0, 3.2], [151.0, 6.5], [150.0, 4.333333333333333], [149.0, 4.0], [148.0, 4.0], [147.0, 3.3333333333333335], [146.0, 5.5], [145.0, 5.0], [144.0, 3.0], [159.0, 4.0], [158.0, 3.5], [157.0, 3.1666666666666665], [156.0, 3.0], [155.0, 2.5], [154.0, 3.0], [153.0, 2.6], [152.0, 3.5], [167.0, 4.0], [166.0, 3.0], [165.0, 3.5], [164.0, 3.0], [163.0, 3.0], [162.0, 3.0], [161.0, 3.0], [160.0, 3.0], [175.0, 3.5], [174.0, 3.0], [173.0, 3.5], [172.0, 3.25], [171.0, 4.0], [170.0, 3.999999999999999], [169.0, 3.5], [168.0, 6.0], [183.0, 3.6666666666666665], [182.0, 4.0], [181.0, 3.142857142857143], [180.0, 3.5], [179.0, 3.5], [178.0, 4.5], [177.0, 3.4285714285714284], [176.0, 3.0], [191.0, 3.0], [190.0, 4.0], [189.0, 3.3333333333333335], [188.0, 3.0], [186.0, 3.0], [185.0, 2.5], [184.0, 3.0], [199.0, 3.0], [198.0, 2.6], [197.0, 3.0], [196.0, 3.5], [195.0, 3.0], [193.0, 3.0], [192.0, 2.5], [207.0, 3.0], [206.0, 3.6666666666666665], [205.0, 4.0], [204.0, 13.333333333333334], [203.0, 5.0], [202.0, 4.333333333333333], [201.0, 3.25], [200.0, 5.0], [215.0, 2.0], [214.0, 5.0], [213.0, 4.0], [212.0, 3.4000000000000004], [211.0, 3.4], [210.0, 3.2727272727272725], [209.0, 3.0], [208.0, 3.5], [222.0, 3.125], [221.0, 3.0], [220.0, 3.0], [219.0, 2.75], [218.0, 3.5], [217.0, 3.2941176470588234], [216.0, 3.6666666666666665], [231.0, 3.0], [230.0, 3.0], [229.0, 3.25], [227.0, 3.0], [226.0, 4.0], [225.0, 3.5], [224.0, 4.0], [239.0, 3.25], [238.0, 2.75], [237.0, 3.0], [236.0, 3.0], [235.0, 3.0], [234.0, 3.3333333333333335], [233.0, 3.0], [232.0, 3.0], [247.0, 3.0], [246.0, 3.2], [245.0, 3.888888888888889], [244.0, 3.4], [243.0, 4.125], [242.0, 3.0], [241.0, 3.375], [240.0, 3.0], [255.0, 3.5], [254.0, 3.9999999999999996], [253.0, 4.0], [252.0, 3.6], [251.0, 3.0], [250.0, 4.0], [249.0, 3.0], [248.0, 3.3333333333333335], [270.0, 2.857142857142857], [271.0, 2.75], [269.0, 3.888888888888889], [268.0, 3.0], [267.0, 3.0], [266.0, 3.0], [265.0, 3.0], [264.0, 4.0], [263.0, 4.0], [257.0, 2.75], [256.0, 3.0], [259.0, 4.0], [258.0, 3.0], [262.0, 3.0], [261.0, 4.0], [260.0, 3.5], [286.0, 3.75], [287.0, 4.0], [285.0, 3.0], [284.0, 3.2857142857142856], [283.0, 3.7142857142857144], [282.0, 3.0], [280.0, 2.6666666666666665], [279.0, 3.0], [273.0, 2.0], [275.0, 3.0], [274.0, 3.0], [278.0, 3.0], [277.0, 3.0], [276.0, 3.5], [302.0, 2.714285714285714], [303.0, 3.0], [301.0, 3.6666666666666665], [300.0, 3.0], [299.0, 2.8], [298.0, 3.0], [297.0, 4.0], [296.0, 3.0], [295.0, 3.0], [289.0, 3.375], [288.0, 3.0], [291.0, 3.0], [290.0, 3.0], [294.0, 2.75], [293.0, 3.3333333333333335], [292.0, 2.8571428571428568], [318.0, 3.0], [319.0, 2.6666666666666665], [317.0, 3.5], [316.0, 5.0], [315.0, 3.0], [314.0, 3.0], [313.0, 2.7777777777777777], [312.0, 3.0], [311.0, 3.0], [305.0, 3.0], [304.0, 3.25], [307.0, 3.0], [306.0, 4.0], [310.0, 3.0], [309.0, 3.0], [308.0, 3.2], [334.0, 2.666666666666667], [335.0, 3.384615384615384], [333.0, 3.5], [332.0, 3.0], [331.0, 2.6428571428571423], [330.0, 3.5], [329.0, 2.5], [328.0, 3.6000000000000005], [327.0, 3.875], [321.0, 2.0], [320.0, 3.0], [323.0, 4.5], [322.0, 2.0], [326.0, 3.5], [325.0, 3.75], [324.0, 3.4], [350.0, 3.6666666666666665], [351.0, 4.0], [349.0, 3.0], [348.0, 5.5], [347.0, 10.666666666666666], [346.0, 9.5], [345.0, 3.75], [344.0, 3.9999999999999996], [343.0, 4.0], [337.0, 4.0], [339.0, 5.0], [338.0, 3.0], [342.0, 4.0], [341.0, 3.3333333333333335], [340.0, 3.3000000000000003], [366.0, 3.75], [367.0, 3.8], [365.0, 3.545454545454545], [364.0, 2.8999999999999995], [362.0, 3.0], [361.0, 3.0], [360.0, 2.875], [359.0, 2.75], [353.0, 3.0], [352.0, 3.142857142857143], [355.0, 4.0], [354.0, 4.0], [358.0, 3.5], [357.0, 3.4], [356.0, 3.0], [382.0, 3.0], [383.0, 3.5], [381.0, 3.0], [380.0, 3.6666666666666665], [379.0, 3.125], [378.0, 3.714285714285714], [377.0, 3.5], [376.0, 2.0], [375.0, 2.8], [369.0, 4.111111111111111], [368.0, 3.0], [371.0, 3.6666666666666665], [370.0, 5.333333333333333], [374.0, 3.5], [373.0, 2.6666666666666665], [372.0, 3.0], [398.0, 3.076923076923077], [399.0, 3.0], [397.0, 3.0], [396.0, 3.1666666666666665], [395.0, 10.0], [394.0, 3.791666666666667], [393.0, 3.0], [392.0, 3.75], [391.0, 3.6666666666666665], [385.0, 3.0], [384.0, 3.333333333333333], [387.0, 3.714285714285714], [386.0, 5.071428571428572], [390.0, 3.0], [389.0, 2.0], [388.0, 3.0], [414.0, 3.8095238095238098], [415.0, 9.0], [413.0, 3.5], [412.0, 3.0], [411.0, 3.2666666666666666], [410.0, 2.6666666666666665], [409.0, 3.1538461538461537], [408.0, 2.666666666666667], [407.0, 3.0], [401.0, 2.0], [400.0, 3.6666666666666665], [403.0, 7.75], [402.0, 9.0], [406.0, 2.3333333333333335], [405.0, 2.833333333333333], [404.0, 3.928571428571428], [430.0, 3.153846153846154], [431.0, 3.8], [429.0, 3.2499999999999996], [428.0, 5.727272727272727], [427.0, 4.0], [426.0, 3.0], [425.0, 2.857142857142857], [424.0, 4.333333333333333], [423.0, 2.923076923076923], [417.0, 7.6], [416.0, 8.0], [419.0, 4.35], [418.0, 8.428571428571429], [422.0, 3.909090909090909], [421.0, 3.111111111111111], [446.0, 3.6363636363636362], [447.0, 5.0], [445.0, 3.8125], [444.0, 3.583333333333333], [443.0, 4.0], [442.0, 2.9090909090909087], [441.0, 3.9], [440.0, 7.24], [439.0, 16.1], [433.0, 3.4], [432.0, 2.3333333333333335], [435.0, 3.0666666666666664], [434.0, 3.0], [438.0, 8.25], [437.0, 3.0], [436.0, 3.0], [462.0, 4.217391304347827], [463.0, 3.5], [461.0, 3.1641791044776113], [460.0, 2.9999999999999996], [459.0, 2.5714285714285716], [458.0, 3.0], [457.0, 3.277777777777778], [456.0, 3.0], [455.0, 6.166666666666666], [449.0, 4.428571428571429], [448.0, 4.0], [451.0, 11.428571428571429], [450.0, 6.0], [454.0, 9.0], [453.0, 10.0], [452.0, 7.0], [478.0, 3.0], [479.0, 3.0714285714285716], [477.0, 3.759259259259259], [476.0, 4.8], [475.0, 3.2500000000000004], [474.0, 4.0588235294117645], [473.0, 4.166666666666666], [472.0, 5.0], [471.0, 3.1176470588235294], [465.0, 4.375000000000001], [464.0, 3.727272727272727], [467.0, 4.0], [466.0, 6.9074074074074066], [470.0, 4.0], [469.0, 2.6666666666666665], [468.0, 3.6], [494.0, 3.775000000000001], [495.0, 5.291079812206574], [493.0, 3.163265306122449], [492.0, 4.437499999999999], [491.0, 4.785714285714286], [490.0, 3.6875], [489.0, 2.9047619047619047], [488.0, 3.4027777777777777], [487.0, 3.111111111111111], [481.0, 3.5625], [480.0, 3.757575757575758], [483.0, 3.7446808510638303], [482.0, 3.916666666666667], [486.0, 3.5], [485.0, 6.0], [484.0, 4.375000000000001], [500.0, 5.571770985198579], [499.0, 5.071290944123318], [498.0, 5.3600713012477765], [497.0, 3.5348837209302317], [496.0, 4.588235294117646], [1.0, 4.0]], "isOverall": false, "label": "GET title/:titleId", "isController": false}, {"data": [[491.3172471202309, 5.454373650108017]], "isOverall": false, "label": "GET title/:titleId-Aggregated", "isController": false}, {"data": [[2.0, 3.3333333333333335], [4.0, 3.7777777777777777], [8.0, 5.0], [10.0, 4.0], [11.0, 3.0], [15.0, 3.0], [19.0, 3.3333333333333335], [20.0, 3.2], [22.0, 54.5], [23.0, 3.0], [24.0, 3.0], [28.0, 3.0], [29.0, 6.5], [31.0, 3.3333333333333335], [32.0, 3.25], [35.0, 3.0], [39.0, 72.4], [38.0, 268.0], [40.0, 3.0], [43.0, 10.0], [45.0, 3.0], [46.0, 3.5], [48.0, 4.0], [50.0, 2.8], [52.0, 4.0], [55.0, 3.6666666666666665], [54.0, 3.0], [56.0, 2.6666666666666665], [58.0, 3.0], [61.0, 5.0], [60.0, 2.6666666666666665], [63.0, 4.0], [62.0, 2.8749999999999996], [65.0, 14.0], [64.0, 4.0], [71.0, 4.0], [70.0, 3.0], [69.0, 2.8571428571428568], [75.0, 2.6666666666666665], [72.0, 2.6666666666666665], [79.0, 3.0], [78.0, 3.0], [77.0, 2.8749999999999996], [76.0, 2.0], [83.0, 2.857142857142857], [82.0, 4.0], [81.0, 3.0], [80.0, 3.0], [87.0, 2.6666666666666665], [86.0, 2.6666666666666665], [85.0, 3.0], [84.0, 3.0], [91.0, 2.3333333333333335], [89.0, 3.5], [88.0, 2.6666666666666665], [94.0, 3.0], [93.0, 2.6666666666666665], [92.0, 3.5], [98.0, 3.0], [97.0, 3.0], [103.0, 15.0], [102.0, 3.0], [101.0, 3.0], [100.0, 5471.0], [107.0, 3.2], [105.0, 2.909090909090909], [111.0, 2.0], [112.0, 143.0], [119.0, 3.1], [118.0, 2.6], [117.0, 3.0], [116.0, 5.0], [122.0, 3.5], [120.0, 3.0], [126.0, 4.333333333333333], [125.0, 3.0], [124.0, 3.0], [135.0, 1.0], [133.0, 3.0], [132.0, 3.3333333333333326], [130.0, 4.0], [129.0, 4.0], [128.0, 2.0], [143.0, 3.0], [142.0, 83.5], [141.0, 2.75], [140.0, 3.166666666666667], [139.0, 3.0], [136.0, 3.0], [151.0, 3.0], [150.0, 3.3333333333333335], [149.0, 5.0], [148.0, 3.0], [147.0, 4.2], [146.0, 2.6666666666666665], [144.0, 3.2], [158.0, 3.5], [157.0, 64.83333333333334], [155.0, 3.166666666666667], [153.0, 2.833333333333333], [167.0, 3.0], [166.0, 3.0], [165.0, 2.5], [164.0, 2.833333333333333], [163.0, 3.0], [162.0, 3.25], [175.0, 2.0], [174.0, 3.0000000000000004], [173.0, 3.0], [172.0, 3.25], [170.0, 29.083333333333332], [169.0, 3.0], [183.0, 3.0], [181.0, 5.571428571428572], [180.0, 2.5], [179.0, 3.4], [178.0, 3.0], [177.0, 13.363636363636363], [191.0, 2.5], [190.0, 2.5], [189.0, 8.0], [188.0, 3.0], [185.0, 2.6666666666666665], [184.0, 2.0], [199.0, 3.0], [198.0, 2.272727272727273], [197.0, 4.0], [196.0, 2.5], [195.0, 3.0], [194.0, 3.0], [192.0, 3.0], [207.0, 3.0], [206.0, 4.0], [205.0, 4.0], [204.0, 13.5], [203.0, 4.0], [202.0, 32.4], [201.0, 3.0], [214.0, 3.0], [213.0, 11.666666666666666], [212.0, 13.499999999999998], [211.0, 4.166666666666667], [210.0, 3.0], [209.0, 3.6666666666666665], [208.0, 2.0], [223.0, 3.0], [222.0, 3.0], [221.0, 3.0], [220.0, 5.25], [219.0, 4.25], [218.0, 2.0], [217.0, 3.526315789473685], [230.0, 2.8], [229.0, 2.6666666666666665], [228.0, 3.9999999999999996], [226.0, 2.5], [225.0, 2.333333333333333], [238.0, 2.5], [237.0, 2.0], [236.0, 3.0], [235.0, 2.3333333333333335], [234.0, 2.3333333333333335], [247.0, 3.0], [246.0, 2.5], [245.0, 4.416666666666667], [244.0, 4.666666666666666], [243.0, 3.6153846153846154], [242.0, 3.272727272727273], [241.0, 3.5], [240.0, 2.5], [255.0, 3.6666666666666665], [254.0, 3.0], [252.0, 3.0], [251.0, 3.7142857142857144], [250.0, 3.0], [249.0, 3.5], [248.0, 2.0], [270.0, 2.666666666666667], [271.0, 3.0], [269.0, 2.5], [268.0, 3.3333333333333335], [266.0, 4.0], [265.0, 2.833333333333333], [264.0, 3.0], [263.0, 2.5], [257.0, 3.0], [259.0, 3.0], [258.0, 9.25], [262.0, 3.5], [261.0, 2.0], [286.0, 3.5], [287.0, 3.0], [284.0, 3.2], [275.0, 3.0], [274.0, 2.8], [273.0, 2.5], [272.0, 2.6666666666666665], [283.0, 3.1666666666666665], [282.0, 3.0], [281.0, 4.0], [280.0, 5.0], [279.0, 2.5], [278.0, 3.0], [277.0, 3.25], [301.0, 3.0], [302.0, 3.3124999999999996], [300.0, 2.75], [291.0, 3.0], [290.0, 3.0], [289.0, 2.5555555555555554], [288.0, 3.0], [299.0, 3.0], [298.0, 3.0], [297.0, 3.5], [294.0, 3.8], [293.0, 2.8333333333333335], [292.0, 3.0], [317.0, 3.0], [319.0, 2.6], [316.0, 4.0], [306.0, 7.500000000000002], [305.0, 2.3333333333333335], [304.0, 2.6999999999999997], [315.0, 2.4], [314.0, 2.0], [313.0, 3.5294117647058822], [312.0, 2.0], [311.0, 4.0], [309.0, 2.0], [308.0, 3.5], [334.0, 5.5], [335.0, 3.533333333333333], [333.0, 3.5], [332.0, 2.0], [331.0, 2.266666666666667], [329.0, 2.3333333333333335], [328.0, 3.2068965517241383], [327.0, 6.55], [323.0, 3.0], [320.0, 2.75], [326.0, 3.0], [325.0, 3.0], [324.0, 3.0], [349.0, 7.0], [351.0, 3.0], [348.0, 4.333333333333333], [339.0, 5.0], [338.0, 4.0], [347.0, 19.0], [346.0, 11.0], [345.0, 3.428571428571429], [344.0, 2.5], [343.0, 16.0], [342.0, 3.0], [341.0, 14.812500000000002], [340.0, 3.0], [366.0, 2.6666666666666665], [367.0, 5.857142857142857], [365.0, 2.846153846153846], [364.0, 3.2142857142857144], [362.0, 2.0], [361.0, 4.666666666666667], [360.0, 3.1666666666666665], [359.0, 2.6363636363636362], [352.0, 2.857142857142857], [354.0, 6.0], [353.0, 2.5833333333333335], [358.0, 4.0], [357.0, 3.9999999999999996], [382.0, 2.6666666666666665], [383.0, 2.5], [381.0, 3.5], [380.0, 2.666666666666667], [379.0, 3.0], [378.0, 3.4], [377.0, 3.8571428571428568], [376.0, 3.0], [374.0, 5.0], [368.0, 3.0], [371.0, 3.8333333333333335], [369.0, 12.53846153846154], [373.0, 2.25], [372.0, 2.7857142857142856], [398.0, 2.928571428571429], [399.0, 3.0], [397.0, 2.8571428571428568], [396.0, 2.8333333333333335], [395.0, 2.2500000000000004], [394.0, 3.625], [393.0, 3.2857142857142856], [392.0, 3.5], [391.0, 11.9], [385.0, 4.285714285714286], [384.0, 5.25], [387.0, 13.181818181818185], [386.0, 4.888888888888889], [390.0, 2.0], [388.0, 3.0], [414.0, 3.8518518518518516], [415.0, 6.0], [413.0, 3.0], [412.0, 3.0], [411.0, 3.272727272727273], [410.0, 2.0], [409.0, 2.8571428571428568], [408.0, 3.0], [407.0, 2.0], [400.0, 4.0], [403.0, 6.333333333333333], [402.0, 6.909090909090909], [406.0, 3.0], [405.0, 4.25], [404.0, 4.999999999999999], [430.0, 3.4705882352941178], [431.0, 2.6666666666666665], [429.0, 2.8541666666666665], [428.0, 7.000000000000001], [427.0, 3.0], [426.0, 2.823529411764706], [425.0, 3.5714285714285716], [424.0, 4.333333333333333], [423.0, 2.818181818181818], [417.0, 7.0], [419.0, 4.322580645161291], [418.0, 10.6], [422.0, 3.6666666666666665], [421.0, 8.533333333333333], [420.0, 2.4285714285714284], [445.0, 14.9], [446.0, 3.6666666666666665], [444.0, 4.5], [435.0, 3.1578947368421058], [434.0, 2.0], [433.0, 2.8], [432.0, 3.0], [442.0, 2.5714285714285716], [441.0, 2.9000000000000004], [440.0, 5.666666666666666], [439.0, 17.0], [438.0, 8.285714285714285], [437.0, 2.7777777777777777], [436.0, 3.1249999999999996], [462.0, 3.4166666666666665], [463.0, 4.0], [461.0, 7.216494845360826], [460.0, 3.933333333333333], [459.0, 2.714285714285714], [458.0, 3.181818181818182], [457.0, 2.8947368421052633], [456.0, 3.384615384615384], [455.0, 5.2], [449.0, 4.5625], [448.0, 3.5], [451.0, 11.6], [450.0, 8.416666666666666], [454.0, 9.0], [453.0, 8.5], [478.0, 3.1111111111111116], [479.0, 2.8947368421052633], [477.0, 3.8000000000000003], [476.0, 3.5], [475.0, 3.0], [474.0, 5.17391304347826], [473.0, 4.289473684210525], [472.0, 3.25], [471.0, 2.846153846153846], [465.0, 3.7142857142857144], [464.0, 4.545454545454545], [467.0, 3.2], [466.0, 17.430769230769222], [470.0, 3.4], [469.0, 3.0], [468.0, 2.8333333333333335], [494.0, 3.5841584158415847], [495.0, 14.709677419354845], [493.0, 3.1486486486486482], [492.0, 5.041666666666667], [491.0, 3.75], [490.0, 21.952380952380953], [489.0, 2.6296296296296306], [488.0, 3.7127659574468077], [487.0, 5.000000000000001], [481.0, 3.6153846153846154], [480.0, 13.317073170731712], [483.0, 4.063829787234043], [482.0, 4.1923076923076925], [486.0, 4.0], [485.0, 4.0], [484.0, 4.723404255319149], [500.0, 13.695353582921246], [499.0, 7.26656626506023], [498.0, 19.336661911554938], [497.0, 3.7045454545454555], [496.0, 4.5]], "isOverall": false, "label": "GET search/:title", "isController": false}, {"data": [[492.66927803931236, 13.343802781471233]], "isOverall": false, "label": "GET search/:title-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 213.25, "minX": 1.71941742E12, "maxY": 335286.38333333336, "series": [{"data": [[1.71941742E12, 209681.86666666667], [1.71941754E12, 312298.4166666667], [1.71941748E12, 335286.38333333336], [1.71941766E12, 900.7833333333333], [1.7194176E12, 262950.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71941742E12, 39818.85], [1.71941754E12, 74836.03333333334], [1.71941748E12, 74777.1], [1.71941766E12, 213.25], [1.7194176E12, 64432.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71941766E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3.772727272727273, "minX": 1.71941742E12, "maxY": 25.59898362507044, "series": [{"data": [[1.71941742E12, 4.6245773923269295], [1.71941754E12, 5.654593976362936], [1.71941748E12, 5.7764696888617015], [1.71941766E12, 3.772727272727273], [1.7194176E12, 5.356159579131933]], "isOverall": false, "label": "GET title/:titleId", "isController": false}, {"data": [[1.71941742E12, 25.59898362507044], [1.71941754E12, 10.741795514270047], [1.71941748E12, 10.835963682895684], [1.71941766E12, 6.200000000000001], [1.7194176E12, 11.591848409009591]], "isOverall": false, "label": "GET search/:title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71941766E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3.772727272727273, "minX": 1.71941742E12, "maxY": 25.59593450028233, "series": [{"data": [[1.71941742E12, 4.622519476701458], [1.71941754E12, 5.653373999237518], [1.71941748E12, 5.7750936472746535], [1.71941766E12, 3.772727272727273], [1.7194176E12, 5.3552827707145925]], "isOverall": false, "label": "GET title/:titleId", "isController": false}, {"data": [[1.71941742E12, 25.59593450028233], [1.71941754E12, 10.740939925441603], [1.71941748E12, 10.83498872707334], [1.71941766E12, 6.200000000000001], [1.7194176E12, 11.591419377904883]], "isOverall": false, "label": "GET search/:title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71941766E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71941742E12, "maxY": 1.8242800677583413, "series": [{"data": [[1.71941742E12, 0.0], [1.71941754E12, 0.004574914220358364], [1.71941748E12, 0.004357465025609656], [1.71941766E12, 0.0], [1.7194176E12, 0.003945637878123636]], "isOverall": false, "label": "GET title/:titleId", "isController": false}, {"data": [[1.71941742E12, 1.8242800677583413], [1.71941754E12, 0.003727922752551504], [1.71941748E12, 0.0031686064225214788], [1.71941766E12, 0.0], [1.7194176E12, 0.004504826599928508]], "isOverall": false, "label": "GET search/:title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71941766E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.71941742E12, "maxY": 8812.0, "series": [{"data": [[1.71941742E12, 6292.0], [1.71941754E12, 7287.0], [1.71941748E12, 8260.0], [1.71941766E12, 106.0], [1.7194176E12, 8812.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71941742E12, 1.0], [1.71941754E12, 1.0], [1.71941748E12, 1.0], [1.71941766E12, 3.0], [1.7194176E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71941742E12, 8.0], [1.71941754E12, 10.0], [1.71941748E12, 11.0], [1.71941766E12, 4.5], [1.7194176E12, 11.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71941742E12, 400.40999999999985], [1.71941754E12, 46.9900000000016], [1.71941748E12, 60.0], [1.71941766E12, 106.0], [1.7194176E12, 37.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71941742E12, 3.0], [1.71941754E12, 4.0], [1.71941748E12, 4.0], [1.71941766E12, 4.0], [1.7194176E12, 4.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71941742E12, 23.0], [1.71941754E12, 15.0], [1.71941748E12, 18.0], [1.71941766E12, 5.0], [1.7194176E12, 17.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71941766E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 5.0, "series": [{"data": [[2.0, 3.0], [4.0, 4.0], [8.0, 3.5], [11.0, 4.0], [19.0, 4.0], [23.0, 3.0], [30.0, 3.0], [50.0, 3.0], [65.0, 3.0], [83.0, 3.0], [118.0, 3.0], [145.0, 3.0], [171.0, 3.0], [207.0, 3.0], [242.0, 3.0], [1.0, 4.0], [286.0, 3.0], [327.0, 3.0], [343.0, 3.0], [354.0, 3.0], [394.0, 3.0], [421.0, 3.0], [442.0, 4.0], [437.0, 3.0], [461.0, 3.0], [462.0, 5.0], [455.0, 4.0], [452.0, 4.0], [457.0, 3.0], [472.0, 5.0], [465.0, 4.0], [473.0, 5.0], [476.0, 4.0], [477.0, 3.0], [475.0, 3.0], [479.0, 5.0], [478.0, 3.0], [467.0, 3.0], [495.0, 4.0], [492.0, 4.0], [489.0, 4.0], [488.0, 4.0], [481.0, 4.0], [491.0, 4.0], [490.0, 4.0], [494.0, 4.0], [493.0, 4.0], [482.0, 3.0], [485.0, 4.0], [487.0, 3.0], [486.0, 4.0], [500.0, 3.0], [497.0, 4.0], [499.0, 3.0], [496.0, 4.0], [498.0, 4.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[145.0, 1.0], [437.0, 1.0], [482.0, 0.0], [494.0, 1.0], [493.0, 1.0], [486.0, 0.5], [492.0, 1.0], [497.0, 0.0], [500.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 500.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 5.0, "series": [{"data": [[2.0, 3.0], [4.0, 4.0], [8.0, 3.5], [11.0, 4.0], [19.0, 4.0], [23.0, 3.0], [30.0, 3.0], [50.0, 3.0], [65.0, 3.0], [83.0, 3.0], [118.0, 3.0], [145.0, 3.0], [171.0, 3.0], [207.0, 3.0], [242.0, 3.0], [1.0, 4.0], [286.0, 3.0], [327.0, 3.0], [343.0, 3.0], [354.0, 3.0], [394.0, 3.0], [421.0, 3.0], [442.0, 4.0], [437.0, 3.0], [461.0, 3.0], [462.0, 5.0], [455.0, 4.0], [452.0, 4.0], [457.0, 3.0], [472.0, 5.0], [465.0, 4.0], [473.0, 5.0], [476.0, 4.0], [477.0, 3.0], [475.0, 3.0], [479.0, 5.0], [478.0, 3.0], [467.0, 3.0], [495.0, 4.0], [492.0, 4.0], [489.0, 4.0], [488.0, 4.0], [481.0, 4.0], [491.0, 4.0], [490.0, 4.0], [494.0, 4.0], [493.0, 4.0], [482.0, 3.0], [485.0, 4.0], [487.0, 3.0], [486.0, 4.0], [500.0, 3.0], [497.0, 4.0], [499.0, 3.0], [496.0, 4.0], [498.0, 4.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[145.0, 1.0], [437.0, 1.0], [482.0, 0.0], [494.0, 1.0], [493.0, 1.0], [486.0, 0.5], [492.0, 1.0], [497.0, 0.0], [500.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 500.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3833333333333333, "minX": 1.71941742E12, "maxY": 492.05, "series": [{"data": [[1.71941742E12, 261.01666666666665], [1.71941754E12, 490.8], [1.71941748E12, 492.05], [1.71941766E12, 1.3833333333333333], [1.7194176E12, 423.1166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71941766E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.71941742E12, "maxY": 491.46666666666664, "series": [{"data": [[1.71941742E12, 260.96666666666664], [1.71941754E12, 491.25], [1.71941748E12, 491.46666666666664], [1.71941766E12, 1.4], [1.7194176E12, 423.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71941754E12, 0.05], [1.71941748E12, 0.06666666666666667], [1.7194176E12, 0.06666666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71941766E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.71941742E12, "maxY": 273.45, "series": [{"data": [[1.71941742E12, 147.58333333333334], [1.71941754E12, 272.6666666666667], [1.71941748E12, 273.45], [1.71941766E12, 0.6666666666666666], [1.7194176E12, 233.01666666666668]], "isOverall": false, "label": "GET search/:title-success", "isController": false}, {"data": [[1.71941754E12, 0.05], [1.71941748E12, 0.06666666666666667], [1.7194176E12, 0.06666666666666667]], "isOverall": false, "label": "GET search/:title-failure", "isController": false}, {"data": [[1.71941742E12, 113.38333333333334], [1.71941754E12, 218.58333333333334], [1.71941748E12, 218.01666666666668], [1.71941766E12, 0.7333333333333333], [1.7194176E12, 190.08333333333334]], "isOverall": false, "label": "GET title/:titleId-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71941766E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.71941742E12, "maxY": 491.46666666666664, "series": [{"data": [[1.71941742E12, 260.96666666666664], [1.71941754E12, 491.25], [1.71941748E12, 491.46666666666664], [1.71941766E12, 1.4], [1.7194176E12, 423.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71941754E12, 0.05], [1.71941748E12, 0.06666666666666667], [1.7194176E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71941766E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

